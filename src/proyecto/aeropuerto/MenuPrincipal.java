/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.aeropuerto;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author SamuelLMiller & Gtoro98
 */
public class MenuPrincipal extends javax.swing.JFrame{
    
    private Grafo grafo = new Grafo(0);
    private Graphics2D g2;
    private boolean flag = false, clickable = false;
    private int d = 60;
    public static MenuPrincipal shared = new MenuPrincipal();

    /**
     * Creates new form MenuPrincipal
     */
//    public MenuPrincipal() {
//        initComponents();
//        this.setLocationRelativeTo(this);
//        this.setResizable(false);
//    }
//    
    public MenuPrincipal(){
        
    }
    
    public void initialize(){
        initComponents();
        this.setLocationRelativeTo(this);
        this.setResizable(false);
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jDialog1 = new javax.swing.JDialog();
        jFrame1 = new javax.swing.JFrame();
        jDialog2 = new javax.swing.JDialog();
        jFrame2 = new javax.swing.JFrame();
        jFrame3 = new javax.swing.JFrame();
        jFrame4 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        btnAgCiudad = new javax.swing.JButton();
        btnDelCiudad = new javax.swing.JButton();
        btnAgVuelo = new javax.swing.JButton();
        btnDelVuelo = new javax.swing.JButton();
        btnModVuelo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        btnPlan = new javax.swing.JButton();
        btnRutas = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenuItem1.setText("jMenuItem1");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame4Layout = new javax.swing.GroupLayout(jFrame4.getContentPane());
        jFrame4.getContentPane().setLayout(jFrame4Layout);
        jFrame4Layout.setHorizontalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame4Layout.setVerticalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAgCiudad.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnAgCiudad.setText("Agregar Ciudad");
        btnAgCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgCiudadActionPerformed(evt);
            }
        });

        btnDelCiudad.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnDelCiudad.setText("Eliminar Ciudad");
        btnDelCiudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelCiudadActionPerformed(evt);
            }
        });

        btnAgVuelo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnAgVuelo.setText("Agregar Vuelo");
        btnAgVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgVueloActionPerformed(evt);
            }
        });

        btnDelVuelo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnDelVuelo.setText("Eliminar Vuelo");
        btnDelVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelVueloActionPerformed(evt);
            }
        });

        btnModVuelo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnModVuelo.setText("Modificar Vuelo");
        btnModVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModVueloActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCargar.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnCargar.setText("Cargar Archivo");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });

        btnPlan.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnPlan.setText("Generar Plan");
        btnPlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlanActionPerformed(evt);
            }
        });

        btnRutas.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnRutas.setText("Listar Rutas");
        btnRutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRutasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAgCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgVuelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelVuelo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnRutas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPlan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCargar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnModVuelo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(btnAgCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnDelCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnAgVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnDelVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPlan, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRutas, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 880, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    

    private void btnAgCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgCiudadActionPerformed
        // TODO add your handling code here:
        
        String ciudadNombre = JOptionPane.showInputDialog(this, "Ingrese el nombre de la ciudad", "Agregar Ciudad", JOptionPane.QUESTION_MESSAGE);
        clickable = true;
        
        //Si ingresó una ciudad vacía
        while ("".equals(ciudadNombre)){
            JOptionPane.showMessageDialog(this, "El nombre de la ciudad no puede ser vacío", "Advertencia", JOptionPane.WARNING_MESSAGE);
            ciudadNombre = JOptionPane.showInputDialog(this, "Ingrese el nombre de la ciudad", "Agregar Ciudad", JOptionPane.QUESTION_MESSAGE);
        }
        //Si seleccionó el botón cancelar
        if (ciudadNombre == null){
            
        }
        else{
            grafo.agregarCiudad(ciudadNombre, jPanel2, g2);
//            repaint();
        }    
    }//GEN-LAST:event_btnAgCiudadActionPerformed

    private void btnAgVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgVueloActionPerformed
        grafo.agregarVuelo(jPanel2, g2);
        
    }//GEN-LAST:event_btnAgVueloActionPerformed

    private void btnModVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModVueloActionPerformed
        grafo.modificarVuelo();
    }//GEN-LAST:event_btnModVueloActionPerformed

    private void btnDelVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelVueloActionPerformed
        grafo.eliminarVuelo(jPanel2, g2);
    }//GEN-LAST:event_btnDelVueloActionPerformed

    private void btnDelCiudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelCiudadActionPerformed
        grafo.eliminarCiudad(jPanel2, g2);    
    }//GEN-LAST:event_btnDelCiudadActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked

    }//GEN-LAST:event_jPanel2MouseClicked

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int returnVal = chooser.showSaveDialog(null);
        
        if(returnVal == JFileChooser.APPROVE_OPTION){
            File choice = chooser.getSelectedFile();
            grafo.guardarArchivo(choice);
        }
        
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        jPanel2.getGraphics().setColor(Color.WHITE);
        jPanel2.setBackground(Color.WHITE);
        if (grafo.getNumCiudades() != 0){
            int ans = JOptionPane.showConfirmDialog(null, "Desea guardar lo que se encuentra en el panel antes de cargar el nuevo archivo?", "Cargar Archivo", JOptionPane.YES_NO_CANCEL_OPTION);
        
            if(ans == JOptionPane.YES_OPTION){
                JFileChooser chooser = new JFileChooser();
                chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int returnVal = chooser.showSaveDialog(null);

                if(returnVal == JFileChooser.APPROVE_OPTION){
                    File choice = chooser.getSelectedFile();
                    grafo.guardarArchivo(choice);
                    JOptionPane.showMessageDialog(null, "Se ha guardado el archivo con exito", "Cargar Archivo", JOptionPane.INFORMATION_MESSAGE);
                }

                try {
                    JFileChooser chooser2 = new JFileChooser();
        //            FileNameExtensionFilter filter = new FileNameExtensionFilter("txt");
        //            chooser.setFileFilter(filter);
                    int returnVal2 = chooser2.showOpenDialog(null);

                    if(returnVal2 == JFileChooser.APPROVE_OPTION) {
                        File choice2 = chooser2.getSelectedFile();
                        grafo.cargarArchivo(jPanel2, g2, choice2);
                    }

                }

                catch (IOException ex) {
                    Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            else if(ans == JOptionPane.NO_OPTION){
                try {
                    JFileChooser chooser2 = new JFileChooser();
        //            FileNameExtensionFilter filter = new FileNameExtensionFilter("txt");
        //            chooser.setFileFilter(filter);
                    int returnVal2 = chooser2.showOpenDialog(null);

                    if(returnVal2 == JFileChooser.APPROVE_OPTION) {
                        File choice = chooser2.getSelectedFile();
                        grafo.cargarArchivo(jPanel2, g2, choice);
                    }

                }

                catch (IOException ex) {
                    Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{

            }
        }
        else{
            try {
                    JFileChooser chooser2 = new JFileChooser();
        //            FileNameExtensionFilter filter = new FileNameExtensionFilter("txt");
        //            chooser.setFileFilter(filter);
                    int returnVal2 = chooser2.showOpenDialog(null);

                    if(returnVal2 == JFileChooser.APPROVE_OPTION) {
                        File choice = chooser2.getSelectedFile();
                        grafo.cargarArchivo(jPanel2, g2, choice);
                    }

                }

                catch (IOException ex) {
                    Logger.getLogger(MenuPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        
        
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnPlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlanActionPerformed
       String[] decision1 = {"Floyd-Warshal", "Dijkstra"};
        String decisionMenu1 = (String) JOptionPane.showInputDialog(null, "Seleccione el tipo de plan", "Generar Plan", JOptionPane.QUESTION_MESSAGE, null, decision1, decision1[0]);
        
        String[] decision2 = {"Por Tiempo", "Por Costo"};
        String decisionMenu2 = (String) JOptionPane.showInputDialog(null, "Seleccione el tipo de plan", "Generar Plan", JOptionPane.QUESTION_MESSAGE, null, decision2, decision2[0]);
        //Si no existen al menos 2 ciudades en el sistema
        if (grafo.flightList.size < 2){
            JOptionPane.showMessageDialog(null, "Hacen falta al menos dos ciudades en el sistema para realizar un plan de vuelo", "Advertencia", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //Convierto el ArrayList listaCiudades a un Array para poder utilizarlo en el menú desplegable
            String[] ciudades = new String[grafo.flightList.size];

            for (int i = 0; i < grafo.cityList.size; i++) {
//                ciudades[i] = grafo.listaCiudades.get(i).getNombre();
                ciudades[i] = grafo.cityList.obtainValue(i).getNombre();
            }

            String ciudadOr = (String) JOptionPane.showInputDialog(null, "Selecciona la ciudad origen", "Generar Plan", JOptionPane.QUESTION_MESSAGE, null, ciudades, ciudades[0]);
            Ciudad ciudadOrigen = null;

            for (int i = 0; i < grafo.cityList.size; i++) {
//                if (grafo.listaCiudades.get(i).getNombre() == ciudadOr){
//                    ciudadOrigen = grafo.listaCiudades.get(i);
//                    break;
//                }
                if (grafo.cityList.obtainValue(i).getNombre() == ciudadOr){
                    ciudadOrigen = grafo.cityList.obtainValue(i);
                    break;
                }
            }
            //Si se selecciona el botón cancelar
            if (ciudadOr == null){

            }
            else{
                String ciudadDes = (String) JOptionPane.showInputDialog(null, "Selecciona la ciudad destino", "Generar Plan", JOptionPane.QUESTION_MESSAGE, null, ciudades, ciudades[0]);
                Ciudad ciudadDestino = null;

                for (int i = 0; i < grafo.cityList.size; i++) {
//                    if (grafo.listaCiudades.get(i).getNombre() == ciudadDes){
//                        ciudadDestino = grafo.listaCiudades.get(i);
//                        break;
//                    }
                    if(grafo.cityList.obtainValue(i).getNombre() == ciudadDes){
                        ciudadDestino = grafo.cityList.obtainValue(i);
                        break;
                    }
                }
                //Si se selecciona el botón cancelar
                if(ciudadDes == null){

                }
                else{
                    //Si se selecciona la misma ciudad
                    if(ciudadOr.equals(ciudadDes)){
                        JOptionPane.showMessageDialog(null, "No se puede realizar un viaje de una ciudad a ella misma", "Advertencia", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        if(decisionMenu1.equals("Floyd-Warshal")){
                        if (decisionMenu2.equals("Por Tiempo")){
                            grafo.FloydWarshallTiempo();
                            Double resultado = grafo.menorTiempo(ciudadOrigen, ciudadDestino);
                            if(resultado.isInfinite()){
                                JOptionPane.showMessageDialog(this, "No existe manera de llegar de " + ciudadOrigen.getNombre() + " a " + ciudadDestino.getNombre());
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "El menor tiempo entre " + ciudadOrigen.getNombre() + " y " + ciudadDestino.getNombre() + " es de " + resultado + " horas \n" + grafo.buscarCaminoFloyd(ciudadOrigen, ciudadDestino) );
                            }
                        }
                        else{
                            grafo.FloydWarshallPrecio();
                            Double resultado = grafo.menorPrecio(ciudadOrigen, ciudadDestino);
                            if(resultado.isInfinite()){
                                JOptionPane.showMessageDialog(this, "No existe manera de llegar de " + ciudadOrigen.getNombre() + " a " + ciudadDestino.getNombre());
                            }
                            else{
                            JOptionPane.showMessageDialog(this, "El menor precio entre " + ciudadOrigen.getNombre() + " y " + ciudadDestino.getNombre() + " es de " + resultado + " Dolares \n" + grafo.buscarCaminoFloyd(ciudadOrigen, ciudadDestino));
                        
                            }
                        }
                    }
                        else{
                            if (decisionMenu2.equals("Por Tiempo")){
                            Double duracion = grafo.DijkstraTiempo(ciudadOrigen, ciudadDestino);

                            if(duracion.isInfinite()){
                                JOptionPane.showMessageDialog(this, "No existe manera de llegar de " + ciudadOrigen.getNombre() + " a " + ciudadDestino.getNombre());
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "El menor tiempo entre " + ciudadOrigen.getNombre() + " y " + ciudadDestino.getNombre() + " es de " + duracion + " horas \n" + grafo.buscarCaminoDijkstra(ciudadOrigen, ciudadDestino));
                            }
                        }
                        else{
                            Double precio = grafo.DijkstraPrecio(ciudadOrigen, ciudadDestino);
                           
                            if(precio.isInfinite()){
                                JOptionPane.showMessageDialog(this, "No existe manera de llegar de " + ciudadOrigen.getNombre() + " a " + ciudadDestino.getNombre());
                            }
                            else{
                            JOptionPane.showMessageDialog(this, "El menor precio entre " + ciudadOrigen.getNombre() + " y " + ciudadDestino.getNombre() + " es de " + precio + " Dolares");
                        
                            }
                        }
                        }
                    }
                }

            }            
        }
    }//GEN-LAST:event_btnPlanActionPerformed

    private void btnRutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRutasActionPerformed
        //Si no existen al menos 2 ciudades en el sistema
        if (grafo.cityList.size < 2){
            JOptionPane.showMessageDialog(null, "Hacen falta al menos dos ciudades en el sistema para poder listar rutas", "Advertencia", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //Convierto el ArrayList listaCiudades a un Array para poder utilizarlo en el menú desplegable
            String[] ciudades = new String[grafo.cityList.size];

            for (int i = 0; i < grafo.cityList.size; i++) {
//                ciudades[i] = grafo.listaCiudades.get(i).getNombre();
                ciudades[i] = grafo.cityList.obtainValue(i).getNombre();
            }

            String ciudadOr = (String) JOptionPane.showInputDialog(null, "Selecciona la ciudad origen", "Listar Rutas", JOptionPane.QUESTION_MESSAGE, null, ciudades, ciudades[0]);
            Ciudad ciudadOrigen = null;

            for (int i = 0; i < grafo.cityList.size; i++) {
                if (grafo.cityList.obtainValue(i).getNombre() == ciudadOr){
                    ciudadOrigen = grafo.cityList.obtainValue(i);
                    break;
                }
            }
            //Si se selecciona el botón cancelar
            if (ciudadOr == null){

            }
            else{
                String ciudadDes = (String) JOptionPane.showInputDialog(null, "Selecciona la ciudad destino", "Listar Rutas", JOptionPane.QUESTION_MESSAGE, null, ciudades, ciudades[0]);
                Ciudad ciudadDestino = null;

                for (int i = 0; i < grafo.cityList.size; i++) {
                    if (grafo.cityList.obtainValue(i).getNombre() == ciudadDes){
                        ciudadDestino = grafo.cityList.obtainValue(i);
                        break;
                    }
                }
                //Si se selecciona el botón cancelar
                if(ciudadDes == null){

                }
                else{
                    //Si se selecciona la misma ciudad
                    if(ciudadOr.equals(ciudadDes)){
                        JOptionPane.showMessageDialog(null, "No se puede realizar un viaje de una ciudad a ella misma", "Advertencia", JOptionPane.ERROR_MESSAGE);
                    }
                    else{
                        
                        grafo.printAllPaths(ciudadOrigen, ciudadDestino);
                        Caminos.caminosShared.setVisible(true);
//                        this.dispose();
//                        Caminos.caminosShared.initialize();
                    }
                }
            }
        }
    }//GEN-LAST:event_btnRutasActionPerformed

         
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgCiudad;
    private javax.swing.JButton btnAgVuelo;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnDelCiudad;
    private javax.swing.JButton btnDelVuelo;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModVuelo;
    private javax.swing.JButton btnPlan;
    private javax.swing.JButton btnRutas;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JFrame jFrame4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
